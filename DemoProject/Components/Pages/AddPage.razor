@page "/addcity"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Add City</PageTitle>

<h3>Add a New City</h3>

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <ValidationSummary />

    <div class="mb-3">
        <label>City Name</label>
        <InputText class="form-control" @bind-Value="city.Name" />
        <ValidationMessage For="@(() => city.Name)" />
    </div>

    <div class="mb-3">
        <label>Population</label>
        <InputNumber class="form-control" @bind-Value="city.Population" />
        <ValidationMessage For="@(() => city.Population)" />
    </div>

    <div class="mb-3">
        <label>Country Name</label>
        <InputText class="form-control" @bind-Value="city.CountryName" />
        <ValidationMessage For="@(() => city.CountryName)" />
    </div>

    <button type="submit" class="btn btn-primary">Add City</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div class="mt-3 alert @(isError ? "alert-danger" : "alert-success")">
        @message
    </div>
}


@code {
    private CityCreateDTO city = new CityCreateDTO();
    private string message;

    private EditContext editContext;
    private ValidationMessageStore messageStore;
    private bool isError = false;


    protected override void OnInitialized()
    {
        editContext = new EditContext(city);
        messageStore = new ValidationMessageStore(editContext);

        editContext.OnFieldChanged += (sender, e) => ValidateField(e.FieldIdentifier);
    }

    private void ValidateField(FieldIdentifier field)
    {
        messageStore.Clear(field);

        if (field.FieldName == nameof(city.Name) && string.IsNullOrWhiteSpace(city.Name))
            messageStore.Add(field, "De naam mag niet leeg zijn");

        if (field.FieldName == nameof(city.Population) && city.Population >= 10000000000)
            messageStore.Add(field, "Het aantal inwoners mag niet groter zijn dan 10000000000");

        if (field.FieldName == nameof(city.CountryName) && string.IsNullOrWhiteSpace(city.CountryName))
            messageStore.Add(field, "Er moet een land gekozen worden");

        editContext.NotifyValidationStateChanged();
    }

    private bool ValidateForm()
    {
        messageStore.Clear();
        ValidateField(new FieldIdentifier(city, nameof(city.Name)));
        ValidateField(new FieldIdentifier(city, nameof(city.Population)));
        ValidateField(new FieldIdentifier(city, nameof(city.CountryName)));

        return !editContext.GetValidationMessages().Any();
    }

    private async Task HandleValidSubmit()
    {
        if (!ValidateForm())
            return;

        try
        {
            var response = await Http.PostAsJsonAsync("api/v1/city/addCities", city);

            if (response.IsSuccessStatusCode)
            {
                isError = false;
                message = "City added successfully!";
                city = new CityCreateDTO();
                editContext = new EditContext(city); 
                messageStore = new ValidationMessageStore(editContext);
                _ = Task.Run(async () =>
                    {
                        await Task.Delay(2000);
                        await InvokeAsync(() => Navigation.NavigateTo("/citylist"));
                    });
            }
            else
            {
                isError = true;
                var errorContent = await response.Content.ReadAsStringAsync();

                try
                {
                    var errorObj = System.Text.Json.JsonSerializer.Deserialize<ApiError>(errorContent,
                        new System.Text.Json.JsonSerializerOptions
                            {
                                PropertyNameCaseInsensitive = true
                            });

                    message = errorObj?.Message ?? "An unknown error occurred.";
                }
                catch
                {
                    message = $"Error: {errorContent}";
                }
            }

        }
        catch (Exception ex)
        {
            message = $"Exception: {ex.Message}";
        }
    }

    public class CityCreateDTO
    {
        public string Name { get; set; }
        public long Population { get; set; }
        public string CountryName { get; set; }
    }
    public class ApiError
    {
        public int StatusCode { get; set; }
        public string ErrorCode { get; set; }
        public string Message { get; set; }
    }

}
